super:
1. call parent class constructor
-> when an instance of child class is created by calling one of its constructor, it invokes immediate parent class default constructor
   which in turn calls its parent class default constructor. this process continues until the default constructor of Object class
   is called.
-> This constructor chain will break if there is no deafult constructor in parent class.
-> To avoid this, you can call non-default constructor of parent class by using super keyword.
-> when parent class constructor is being called using super keyword, it must e written as first line of code of child constructor. 

2. call member of parent class
-> members of parent class can be accessed using syntax suoer.memberName() or super.memberMethod()

****************************************************************************

instanceOf operator
- checks whether an object is
	an instance of a class
	an instance of a subclass
	an instance of a class that implements a particular interface

*****************************************************************************

POLYMORPHISM
Java implements polymorphism in 2 ways :
1. method overloading - compile time polymorphism
2. method overriding - runtime polymorphism


*****************************************************************************

@Override annotation
- not mandatory to use this annotation
- when a method marked with @Override fails to correctly override a method in one of its superclasses,
  compiler generates an error
- @Override is useful in detecting changes in parent classes which has not been reported down the hierarchy
- 


*************************************************************************

@SuppressWarnings
instructs compiler to suppress warning messages it normally shows during compilation time 

@Deprecated
marks an old method as deprecated.
it says that this method must not be used anymore, because in future versions this old methods may not be supported

***************************************************************************
FINAL

when a variable is declared as final
Ans: once a variable is declared as final, its value cannot be changed

when a method is declared as final 
Ans:
-> a method declared as final cannot be oerridden in its subclasses
-> their values cannot be changed once initialized
-> a class or method cannot be abstract and final at the same time

What happens when a class is declared as final?
Ans:
-> a final class cannot be extended 
eg: String and StringBuffer class

*********************************************************************
review question
1 - final
2 - true
3 - public 